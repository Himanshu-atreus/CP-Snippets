class LCA {
private:
    vi height,euler,first,segtree;
    vb visited;
    int n;
    void dfs(vector<vector<int>>&adj,int node,int h) {
        visited[node]=true; height[node]=h;
        first[node]=euler.size();
        euler.pb(node);
        for(auto to:adj[node]) {
            if(!visited[to]) { dfs(adj,to,h+1); euler.pb(node); }
        }
        return;
    }

    void build(int node,int b,int e) {
        if(b==e) segtree[node] = euler[b];
        else {
            int mid=(b+e)/2;
            build(node<<1,b,mid);
            build(node<<1|1,mid+1,e);
            int l=segtree[node<<1],r=segtree[node<<1|1];
            segtree[node]=(height[l]<height[r])?l:r;
        }
        return;
    }

    int query(int node,int b,int e,int L,int R) {
        if(b>R||e<L) return -1;
        if(b>=L&&e<=R) return segtree[node];
        int mid=(b+e)>>1,left=query(node<<1,b,mid,L,R),right=query(node<<1|1,mid+1,e,L,R);
        if(left==-1) return right;
        if(right==-1) return left;
        return height[left]<height[right]?left:right;
    }
    
    public:
    LCA(vector<vi>&adj,int root=0) {
        n=adj.size(); height.resize(n);
        first.resize(n); euler.reserve(n*2);
        visited.assign(n,false); dfs(adj,root,0);
        int m=euler.size(); segtree.resize(m*4);
        build(1, 0, m - 1);
        return;
    }
    
    int lca(int u,int v) {
        int left=first[u],right=first[v];
        if(left>right) swap(left, right);
        return query(1,0,euler.size()-1,left,right);
    }
    
    int dist(int u,int v) {
        int lx=lca(u,v);
        return height[u]+height[v]-2*height[lx];
    }
};