class SegmentTree {
    private:
    int (*function)(int,int);
    vector<int> T;
    int n,modulo;

    public:
    SegmentTree(vector<int>& v,int fx(int,int)=func,int modulus=mod) {
        n=v.size(); vector<int> st(2*n);
        for(int i=0;i<n;i++) st[n+i]=v[i];
        for(int i=n-1;i>-1;i--) st[i]=fx(st[i<<1],st[i<<1|1])%modulus;
        function=fx; T=st; modulo=modulus;
        return;
    }

    void modify(int p,int v) {
        int n=T.size()/2;
        for(T[p+=n]=v;p>1;p>>=1) T[p>>1]=function(T[p],T[p^1])%modulo;
        return;
    }

    int query(int l,int r) {
        int res=0,n=T.size()/2,flag=0;
        for(l+=n,r+=n;l<r;l>>=1,r>>=1) {
            if(l&1) {
                if(flag==1) res=function(res,T[l++])%modulo;
                else { res=T[l++]; flag=1; }
            }
            if(r&1) {
                if(flag==1) res=function(res,T[--r])%modulo;
                else { res=T[--r]; flag=1; }
            }
        }
        return res;
    }
};

class SegmentTreeLazyPropagation {
    private:
    int (*function)(int,int);
    int (*take) (int,int);
    vector<int> tree,lazy,size;
    int n,modulo;

    vector<int> create(vector<int>& v) {
        int len=log2(v.size());
        if(pow(2,len)<v.size()) len++;
        vector<int> ans(pow(2,len),0);
        for(int i=0;i<v.size();i++) ans[i]=v[i];
        return ans;
    }

    void propagate(int i) {
        tree[i]=(tree[i]+take(size[i],lazy[i])%modulo)%modulo;
        if(i<<1 < 2*n) lazy[i<<1]=(lazy[i<<1]+lazy[i])%modulo;
        if((i<<1|1) < 2*n) lazy[i<<1|1]=(lazy[i<<1|1]+lazy[i])%modulo;
        lazy[i]=0; return;
    }

    pair<int,int> query(int a,int b,int k,int x,int y) {
        propagate(k);
        if(b<x || a>y) return {0,-1};
        else if(a<=x && y<=b) return {tree[k],0};
        int d=(x+y)/2;
        pair<int,int> ret1=query(a,b,2*k,x,d);
        pair<int,int> ret2=query(a,b,2*k+1,d+1,y);
        if(ret1.second==-1 && ret2.second==-1) return {0,-1};
        else if(ret1.second==-1) return ret2;
        else if(ret2.second==-1) return ret1;
        else return {function(ret1.first,ret2.first)%modulo,0};
    }

    void modify(int a,int b,int c,int k,int x,int y) {
        propagate(k);
        if(b<x || a>y) return;
        else if(a<=x && y<=b) {
            lazy[k]=(lazy[k]+c)%modulo;
            return;
        }
        int d=(x+y)/2;
        modify(a,b,c,2*k,x,d); modify(a,b,c,2*k+1,d+1,y);
        tree[k]=function((tree[k<<1]+take(size[k<<1],lazy[k<<1])%modulo)%modulo,
                        (tree[k<<1|1]+take(size[k<<1|1],lazy[k<<1|1])%modulo)%modulo)%modulo;
        return;
    }

    public:
    SegmentTreeLazyPropagation(vector<int>& vx,int fx(int,int)=func,int tx(int,int)=func_take,int modulus=mod) {
        vector<int> v=create(vx);
        n=v.size(); vector<int> st(2*n); size.assign(2*n,0);
        function=fx; take=tx;
        for(int i=0;i<n;i++) { st[n+i]=v[i]; size[n+i]=1; }
        for(int i=n-1;i>-1;i--) {
            st[i]=function(st[i<<1],st[i<<1|1])%modulus;
            size[i]=(size[i<<1]+size[i<<1|1]);
        }
        tree=st; modulo=modulus; lazy.assign(2*n,0);
        return;
    }

    void modify(int u,int v,int x) {
        modify(u,v-1,x,1,0,n-1);
        return;
    }

    int query(int l,int r) {
        pair<int,int> ret=query(l,r-1,1,0,n-1);
        if(ret.second==-1) return -1;
        else return ret.first;
    }
};
